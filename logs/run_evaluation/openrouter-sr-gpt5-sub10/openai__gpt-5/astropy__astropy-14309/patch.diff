
--- a/astropy/io/fits/connect.py
+++ b/astropy/io/fits/connect.py
@@ -40,25 +40,36 @@
 def is_fits(origin, filepath, fileobj, *args, **kwargs):
     """
     Determine whether `origin` is a FITS file.
 
     Parameters
     ----------
     origin : str or readable file-like
         Path or file object containing a potential FITS file.
 
     Returns
     -------
     is_fits : bool
         Returns `True` if the given file is a FITS file.
     """
     if fileobj is not None:
         pos = fileobj.tell()
         sig = fileobj.read(30)
         fileobj.seek(pos)
         return sig == FITS_SIGNATURE
     elif filepath is not None:
-        if filepath.lower().endswith(
+        # Guard against non-string path-like objects
+        try:
+            path_str = filepath.lower()
+        except AttributeError:
+            try:
+                # Support os.PathLike objects
+                from os import fspath
+
+                path_str = fspath(filepath).lower()
+            except Exception:
+                path_str = str(filepath).lower()
+        if path_str.endswith(
             (".fits", ".fits.gz", ".fit", ".fit.gz", ".fts", ".fts.gz")
         ):
             return True
-    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))
+        # If a filepath was provided but doesn't look like FITS, it's not FITS.
+        return False
+    # If no filepath/fileobj was provided, fall back to checking object type if available.
+    return len(args) > 0 and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))
 
 
 def _decode_mixins(tbl):
     """Decode a Table ``tbl`` that has astropy Columns + appropriate meta-data into
     the corresponding table with mixin columns (as appropriate).
     """
